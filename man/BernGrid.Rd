% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BernGrid.R
\name{BernGrid}
\alias{BernGrid}
\title{Bayesian inference for a proportion via grid method}
\usage{
BernGrid(data = "HHTT", p = seq(0, 1, length.out = resolution + 1),
  prior = 1, results = c("plot", "data"), steps = FALSE, geom = if
  (length(p) <= 20) geom_col else geom_area, alpha = 0.5,
  resolution = 200, filter = TRUE, ...)
}
\arguments{
\item{data}{a vector of 0's and 1's or a character string with two characters representing
success/failure or head/tails from the bernoulli experiment.}

\item{p}{a vector of probabilites to update.}

\item{prior}{a vector of prior values at each probability in \code{p},
a constant, a function, or a one-sided formula.
If a function or formula, \code{\link[purrr:map_dbl]{purrr::map_dbl()}} is used to
apply to each value of \code{p}.  (See help for \code{\link[purrr:map_dbl]{purrr::map_dbl()}}
for details regarding how this works.)}

\item{results}{either \code{"plot"} or \code{"data"} to indicate what information is returned.}

\item{steps}{a logical indicating wether the process should be shown step-by-step or
for all the data at once.}

\item{geom}{a geom used for plotting.  Good choices include
\code{\link[ggplot2:geom_line]{ggplot2::geom_line()}},
\code{\link[ggplot2:geom_col]{ggplot2::geom_col()}},
\code{\link[ggplot2:geom_point]{ggplot2::geom_point()}},
\code{\link[ggplot2:geom_area]{ggplot2::geom_area()}}}

\item{alpha}{opacity used for the plot}

\item{resolution}{if \code{p} is not specified, \code{resolution} an be used to create an equally
spaced grid of \code{resolution + 1} values from 0 to 1.}

\item{filter}{an expression used to filter the results. See examples.}

\item{...}{additional arguments passed to the geom.}
}
\description{
This intended as a black-box example with a small data set to illustrate
the results of Bayesian updating.  The model is a Bernoulli model with
fixed proportion over all trials.  Prior, data, and grid resolution
can be supplied by the user. See examples.
}
\examples{
BernGrid("HHTTH", p = seq(0, 1, by = 0.25), results = "data")
BernGrid("HHTTH",
            prior = ~ dbeta(.x, shape1 = 2, shape2 = 5))
BernGrid("HHTTH", geom = geom_col, resolution = 100,
            prior = ~ dbeta(.x, shape1 = 2, shape2 = 5))
BernGrid("HHTTH", geom = geom_area, resolution = 100,
            prior = ~ dbeta(.x, shape1 = 2, shape2 = 5))
BernGrid("HHTTH",
  p = seq(0, 1, by = 0.25), prior = c(.1, .2 , .4, .2, .1))
BernGrid("SSFFS", p = seq(0, 1, by = 0.25), steps = TRUE, results = "data")
BernGrid("SSFFS", p = seq(0, 1, by = 0.25), alpha = 0.9, steps = TRUE)
BernGrid("SSFFS", p = seq(0, 1, by = 0.25), alpha = 0.5, steps = TRUE,
  filter = n \%in\% c(4,5))
BernGrid("HHTTHTHHTHHH", alpha = 0.9, steps = TRUE)
BernGrid("HHTTHTHHTHHH", steps = TRUE, geom = geom_area)
BernGrid("HHTTHTHHTHHH", alpha = 0.9, steps = TRUE, filter = n \%in\% c(1, 5, 10))
BernGrid("HHTTHTHHTHHH", alpha = 0.9, steps = TRUE, filter = n == 10)
# same posterior as in the previous example -- order doesn't matter
BernGrid("TTTTHHHHHHHH", alpha = 0.9, steps = TRUE, filter = n == 10)
BernGrid("HHHHHHHHHHHH", alpha = 0.9)
BernGrid("HHHHHHHHHHHH", alpha = 0.9, steps = TRUE)
BernGrid(rbinom(12, 1, 0.25), alpha = 0.9, steps = TRUE)
}
